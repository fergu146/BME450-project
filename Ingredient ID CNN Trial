# CODE FROM 1.7 LESSON- USE AS TEMPLATE

import torch
from torch import nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import DataLoader
from torchvision import datasets, transforms

transform = transforms.Compose([
    transforms.Resize((64, 64)),  # Resize images to 64x64
    transforms.ToTensor()  # Convert images to PyTorch tensors
])

training_data = datasets.ImageFolder(root="Vegetables/Train", transform=transform)
test_data = datasets.ImageFolder(root="Vegetables/Test", transform=transform)

from PIL import Image
import os

def convert_all_png_to_rgba(input_folder):
    for root, _, files in os.walk(input_folder):
        for file in files:
            if file.lower().endswith(".png"):  # ONLY process PNGs
                path = os.path.join(root, file)
                try:
                    img = Image.open(path)
                    if img.mode == 'P':
                        print(f"Converting {path} from 'P' to 'RGBA'")
                        img = img.convert('RGBA')
                        img.save(path)  # Overwrite in-place
                except Exception as e:
                    print(f"Error converting {path}: {e}")

convert_all_png_to_rgba("Vegetables/Train")
convert_all_png_to_rgba("Vegetables/Test")

train_loader = DataLoader(training_data, batch_size=32, shuffle=True)
test_loader = DataLoader(test_data, batch_size=32, shuffle=False)


categories = ["Amaranth", "Apple", "Banana", "Beetroot", "Bell pepper", "Bitter Gourd", 
    "Blueberry", "Bottle Gourd", "Broccoli", "Cabbage", "Cantaloupe", "Capsicum", 
    "Carrot", "Cauliflower", "Chilli pepper", "Coconut", "Corn", "Cucumber", 
    "Dragon_fruit", "Eggplant", "Fig", "Garlic", "Ginger", "Grapes", "Jalepeno", 
    "Kiwi", "Lemon", "Mango", "Okra", "Onion", "Orange", "Paprika", "Pear", 
    "Peas", "Pineapple", "Pomegranate", "Potato", "Pumpkin", "Raddish", "Raspberry", 
    "Ridge Gourd", "Soy beans", "Spinach", "Spiny Gourd", "Sponge Gourd", 
    "Strawberry", "Sweetcorn", "Sweetpotato", "Tomato", "Turnip", "Watermelon"]

# select a random sample from the training set
sample_num = 2
# print(training_data[sample_num])
print('Inputs sample - image size:', training_data[sample_num][0].shape)
print('Label:', training_data[sample_num][1], '\n')

import matplotlib.pyplot as plt

ima = training_data[sample_num][0]
print('Inputs sample - min,max,mean,std:', ima.min().item(), ima.max().item(), ima.mean().item(), ima.std().item())
ima = (ima - ima.mean())/ ima.std()
ima = torch.clamp(ima, 0, 1)
print('Inputs sample normalized - min,max,mean,std:', ima.min().item(), ima.max().item(), ima.mean().item(), ima.std().item())
iman = ima.permute(1, 2, 0) # needed to be able to plot
plt.imshow(iman)
plt.show()

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(0.25)
        self.fc1 = nn.Linear(64 * 16 * 16, 512)
        self.fc2 = nn.Linear(512, len(categories))

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))  # (32, 32, 32)
        x = self.pool(F.relu(self.conv2(x)))  # (64, 16, 16)
        x = x.view(x.size(0), -1)
        x = self.dropout(F.relu(self.fc1(x)))
        x = self.fc2(x)
        return x
    
def train_loop(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    for batch, (X, y) in enumerate(dataloader):
        # Compute prediction and loss
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch % 100 == 0:
            loss, current = loss.item(), (batch + 1) * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")


def test_loop(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    test_loss, correct = 0, 0

    with torch.no_grad():
        for X, y in dataloader:
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()

    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

#TRAIN THE NETWORK

model = CNN()

batch_size = 3990
train_dataloader = DataLoader(training_data, batch_size=batch_size)
test_dataloader = DataLoader(test_data, batch_size=batch_size)

loss_fn = nn.CrossEntropyLoss() # used for categorization
learning_rate = 1e-3
# note: optimizer is Adam: one of the best optimizers to date
# it can infer learning rate and all hyper-parameters automatically
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

epochs = 10
for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train_loop(train_dataloader, model, loss_fn, optimizer)
    test_loop(test_dataloader, model, loss_fn)
print("Done!")


# TEST IF IT WORKED CORRECTLY
# sample_num = 2 # select a random sample
sample_num = 2

ima = training_data[sample_num][0]
ima = (ima - ima.mean())/ ima.std()
ima = torch.clamp(ima, 0, 1)
iman = ima.permute(1, 2, 0) # needed to be able to plot
plt.imshow(iman)
plt.show()

image = training_data[sample_num][0]  # Get single image
image = image.unsqueeze(0)  # Add batch dimension: (1, 3, 28, 28)
r = model(image)  # Now the shape is correct

image = image.view(image.size(0), -1)

with torch.no_grad():
    r = model(image)

print('neural network output pseudo-probabilities:', r)
print('neural network output class number:', torch.argmax(r).item())
print('neural network output, predicted class:', categories[torch.argmax(r).item()])
